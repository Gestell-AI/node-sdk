// Generated by ts-to-zod
import { z } from "zod";

export const searchTypeSchema = z.union([
  z.literal("summary"),
  z.literal("phrase"),
  z.literal("keywords"),
]);

export const searchMethodSchema = z.union([
  z.literal("fast"),
  z.literal("normal"),
  z.literal("precise"),
]);

export const searchRequestBodySchema = z.object({
  collectionId: z.string(),
  categoryId: z.string().optional(),
  prompt: z.string(),
  method: searchMethodSchema.optional(),
  type: searchTypeSchema.optional(),
  vectorDepth: z.number().optional(),
  nodeDepth: z.number().optional(),
  maxQueries: z.number().optional(),
  maxResults: z.number().optional(),
  includeContent: z.boolean().optional(),
  includeEdges: z.boolean().optional(),
  edgesInResult: z.boolean().optional(),
});

export const promptMessageSchema = z.object({
  role: z.union([z.literal("user"), z.literal("model"), z.literal("system")]),
  content: z.string(),
});

export const promptRequestBodySchema = searchRequestBodySchema
  .omit({ includeContent: true, includeEdges: true, edgesInResult: true })
  .extend({
    template: z.string().optional(),
    cot: z.boolean().optional(),
    messages: z.array(promptMessageSchema).optional(),
  });

export const searchDefaultsSchema = z.object({
  type: searchTypeSchema,
  vectorDepth: z.number(),
  nodeDepth: z.number(),
  maxQueries: z.number(),
  maxResults: z.number(),
});

export const searchResultSchema = z.object({
  content: z.string(),
  citation: z.string(),
  reason: z.string(),
});
