// Generated by ts-to-zod
import { z } from "zod";

export const collectionTypeSchema = z.union([
  z.literal("frame"),
  z.literal("searchable-frame"),
  z.literal("canon"),
  z.literal("features"),
]);

export const piiTypeSchema = z.union([
  z.literal("generic"),
  z.literal("legal"),
  z.literal("medical"),
]);

export const categoryTypeSchema = z.union([
  z.literal("content"),
  z.literal("concepts"),
  z.literal("features"),
  z.literal("table"),
]);

export const piiIdentifierOptionSchema = z.union([
  z.literal("Name"),
  z.literal("Geographic Data"),
  z.literal("Dates"),
  z.literal("Phone Number"),
  z.literal("Fax Number"),
  z.literal("Email Address"),
  z.literal("Social Security Number"),
  z.literal("Medical Record Number"),
  z.literal("Health Plan Beneficiary Number"),
  z.literal("Account Number"),
  z.literal("Certificate/License Number"),
  z.literal("Vehicle Identifier"),
  z.literal("Device Identifier"),
  z.literal("Web URL"),
  z.literal("IP Address"),
  z.literal("Biometric Identifier"),
  z.literal("Full-face Photograph"),
  z.literal("Unique Identifier Code"),
]);

export const categorySchema = z.object({
  id: z.string(),
  collectionId: z.string(),
  name: z.string(),
  type: categoryTypeSchema,
  instructions: z.string(),
  singleEntry: z.boolean(),
  dateCreated: z.date(),
  dateUpdated: z.date(),
});

export const collectionStatsSchema = z.object({
  docs: z.number(),
  size: z.number(),
  nodes: z.number(),
  status: z.object({
    documents: z.number(),
    nodes: z.number(),
    edges: z.number(),
    vectors: z.number(),
    category: z.number(),
  }),
});

export const createCategoryPayloadSchema = z.object({
  name: z.string(),
  type: categoryTypeSchema,
  instructions: z.string(),
  singleEntry: z.boolean(),
});

const organizationListResultSchema = z.any();
